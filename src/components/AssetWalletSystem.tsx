import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { databaseAdapter } from '@/lib/databaseAdapter';
import { 
  Wallet, 
  ArrowUpDown, 
  TrendingUp, 
  TrendingDown,
  DollarSign,
  Coins,
  RefreshCw,
  ExternalLink,
  AlertTriangle,
  CheckCircle,
  Clock,
  Zap
} from 'lucide-react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';

interface AssetWallet {
  id: string;
  user_id: string;
  asset_initiative_id: string;
  wallet_address: string;
  currency_type: 'USDT' | 'ETH' | 'BTC' | 'SOL' | 'BNB' | 'RAC';
  balance: number;
  locked_balance: number;
  total_invested: number;
  total_returns: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  asset_initiative?: {
    name: string;
    description: string;
    category: string;
  };
}

interface DEXTransaction {
  id: string;
  user_id: string;
  from_currency: string;
  to_currency: string;
  from_amount: number;
  to_amount: number;
  exchange_rate: number;
  dex_provider: 'uniswap' | 'pancakeswap' | 'raydium' | 'jupiter';
  transaction_hash?: string;
  status: 'pending' | 'completed' | 'failed';
  created_at: string;
  completed_at?: string;
}

interface AssetWalletSystemProps {
  userId: string;
  userBalance: number; // RAC token balance
  onBalanceUpdate: () => void;
}

export const AssetWalletSystem: React.FC<AssetWalletSystemProps> = ({
  userId,
  userBalance,
  onBalanceUpdate
}) => {
  const { toast } = useToast();
  const [wallets, setWallets] = useState<AssetWallet[]>([]);
  const [dexTransactions, setDexTransactions] = useState<DEXTransaction[]>([]);
  const [loading, setLoading] = useState(true);
  const [showCreateWallet, setShowCreateWallet] = useState(false);
  const [showDEXModal, setShowDEXModal] = useState(false);
  const [selectedWallet, setSelectedWallet] = useState<AssetWallet | null>(null);
  const [formData, setFormData] = useState({
    asset_initiative_id: '',
    currency_type: 'USDT' as 'USDT' | 'ETH' | 'BTC' | 'SOL' | 'BNB',
    initial_deposit: 0
  });
  const [dexFormData, setDexFormData] = useState({
    from_currency: 'RAC',
    to_currency: 'USDT',
    amount: 0,
    dex_provider: 'jupiter' as 'uniswap' | 'pancakeswap' | 'raydium' | 'jupiter'
  });

  useEffect(() => {
    loadAssetWallets();
    loadDEXTransactions();
  }, [userId]);

  const loadAssetWallets = async () => {
    try {
      const { data, error } = await supabase
        .from('asset_wallets')
        .select(`
          *,
          asset_initiatives (
            name,
            description,
            category
          )
        `)
        .eq('user_id', userId)
        .eq('is_active', true)
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      setWallets(data || []);
    } catch (error) {
      console.error('Error loading asset wallets:', error);
      toast({
        title: "Failed to Load Wallets",
        description: "Could not load your asset wallets. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const loadDEXTransactions = async () => {
    try {
      const { data, error } = await supabase
        .from('dex_transactions')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(10);

      if (error) {
        throw error;
      }

      setDexTransactions(data || []);
    } catch (error) {
      console.error('Error loading DEX transactions:', error);
    }
  };

  const createAssetWallet = async () => {
    if (!formData.asset_initiative_id || !formData.currency_type) {
      toast({
        title: "Missing Information",
        description: "Please select an asset initiative and currency type.",
        variant: "destructive"
      });
      return;
    }

    try {
      // Generate a unique wallet address (in production, this would be generated by the blockchain)
      const walletAddress = `0x${Math.random().toString(16).substr(2, 40)}`;

      const walletData = {
        user_id: userId,
        asset_initiative_id: formData.asset_initiative_id,
        wallet_address: walletAddress,
        currency_type: formData.currency_type,
        balance: formData.initial_deposit,
        locked_balance: 0,
        total_invested: formData.initial_deposit,
        total_returns: 0,
        is_active: true
      };

      const { data, error } = await supabase
        .from('asset_wallets')
        .insert(walletData)
        .select(`
          *,
          asset_initiatives (
            name,
            description,
            category
          )
        `)
        .single();

      if (error) {
        throw error;
      }

      toast({
        title: "Asset Wallet Created",
        description: `Your ${formData.currency_type} wallet for the selected asset has been created.`,
        variant: "default"
      });

      setShowCreateWallet(false);
      resetForm();
      loadAssetWallets();
      onBalanceUpdate();
    } catch (error) {
      console.error('Error creating asset wallet:', error);
      toast({
        title: "Failed to Create Wallet",
        description: error instanceof Error ? error.message : "Could not create the asset wallet. Please try again.",
        variant: "destructive"
      });
    }
  };

  const executeDEXSwap = async () => {
    if (!dexFormData.amount || dexFormData.amount <= 0) {
      toast({
        title: "Invalid Amount",
        description: "Please enter a valid amount to swap.",
        variant: "destructive"
      });
      return;
    }

    if (dexFormData.amount > userBalance) {
      toast({
        title: "Insufficient Balance",
        description: `You only have ${userBalance} RAC tokens available.`,
        variant: "destructive"
      });
      return;
    }

    try {
      // Get current exchange rate (mock implementation)
      const exchangeRate = await getExchangeRate(dexFormData.from_currency, dexFormData.to_currency);
      const toAmount = dexFormData.amount * exchangeRate;

      // Create DEX transaction record
      const transactionData = {
        user_id: userId,
        from_currency: dexFormData.from_currency,
        to_currency: dexFormData.to_currency,
        from_amount: dexFormData.amount,
        to_amount: toAmount,
        exchange_rate: exchangeRate,
        dex_provider: dexFormData.dex_provider,
        status: 'pending'
      };

      const { data: transaction, error: transactionError } = await supabase
        .from('dex_transactions')
        .insert(transactionData)
        .select()
        .single();

      if (transactionError) {
        throw transactionError;
      }

      // Simulate DEX execution (in production, this would call actual DEX APIs)
      setTimeout(async () => {
        try {
          // Update transaction status
          await supabase
            .from('dex_transactions')
            .update({
              status: 'completed',
              completed_at: new Date().toISOString(),
              transaction_hash: `0x${Math.random().toString(16).substr(2, 64)}`
            })
            .eq('id', transaction.id);

          // Update user's asset wallet balance
          const targetWallet = wallets.find(w => w.currency_type === dexFormData.to_currency);
          if (targetWallet) {
            await supabase
              .from('asset_wallets')
              .update({
                balance: targetWallet.balance + toAmount,
                total_invested: targetWallet.total_invested + toAmount
              })
              .eq('id', targetWallet.id);
          }

          toast({
            title: "DEX Swap Completed",
            description: `Successfully swapped ${dexFormData.amount} ${dexFormData.from_currency} for ${toAmount.toFixed(6)} ${dexFormData.to_currency}.`,
            variant: "default"
          });

          setShowDEXModal(false);
          resetDEXForm();
          loadAssetWallets();
          loadDEXTransactions();
          onBalanceUpdate();
        } catch (error) {
          console.error('Error completing DEX swap:', error);
          // Update transaction status to failed
          await supabase
            .from('dex_transactions')
            .update({ status: 'failed' })
            .eq('id', transaction.id);
        }
      }, 3000); // Simulate 3-second processing time

      toast({
        title: "DEX Swap Initiated",
        description: "Your swap is being processed. This may take a few minutes.",
        variant: "default"
      });

    } catch (error) {
      console.error('Error executing DEX swap:', error);
      toast({
        title: "DEX Swap Failed",
        description: error instanceof Error ? error.message : "Could not execute the swap. Please try again.",
        variant: "destructive"
      });
    }
  };

  const getExchangeRate = async (from: string, to: string): Promise<number> => {
    // Mock exchange rates (in production, this would fetch from DEX APIs)
    const rates: Record<string, Record<string, number>> = {
      'RAC': {
        'USDT': 0.05,
        'ETH': 0.00002,
        'BTC': 0.000001,
        'SOL': 0.1,
        'BNB': 0.02
      }
    };

    return rates[from]?.[to] || 1;
  };

  const resetForm = () => {
    setFormData({
      asset_initiative_id: '',
      currency_type: 'USDT',
      initial_deposit: 0
    });
  };

  const resetDEXForm = () => {
    setDexFormData({
      from_currency: 'RAC',
      to_currency: 'USDT',
      amount: 0,
      dex_provider: 'jupiter'
    });
  };

  const getCurrencyIcon = (currency: string) => {
    switch (currency) {
      case 'USDT': return <DollarSign className="h-4 w-4" />;
      case 'ETH': return <Coins className="h-4 w-4" />;
      case 'BTC': return <Coins className="h-4 w-4" />;
      case 'SOL': return <Zap className="h-4 w-4" />;
      case 'BNB': return <Coins className="h-4 w-4" />;
      case 'RAC': return <TrendingUp className="h-4 w-4" />;
      default: return <Wallet className="h-4 w-4" />;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'pending': return <Clock className="h-4 w-4 text-yellow-500" />;
      case 'failed': return <AlertTriangle className="h-4 w-4 text-red-500" />;
      default: return <Clock className="h-4 w-4 text-gray-500" />;
    }
  };

  if (loading) {
    return (
      <div className="text-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
        <p className="mt-2 text-gray-600">Loading asset wallets...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold">Asset Wallets</h2>
          <p className="text-gray-600">Manage wallets for specific asset initiatives with multi-currency support</p>
        </div>
        <div className="flex gap-2">
          <Dialog open={showDEXModal} onOpenChange={setShowDEXModal}>
            <DialogTrigger asChild>
              <Button variant="outline" onClick={() => resetDEXForm()}>
                <ArrowUpDown className="h-4 w-4 mr-2" />
                DEX Swap
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-md">
              <DialogHeader>
                <DialogTitle>DEX Token Swap</DialogTitle>
                <DialogDescription>
                  Convert your RAC tokens to other cryptocurrencies for asset investments
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="from_currency">From Currency</Label>
                  <Select
                    value={dexFormData.from_currency}
                    onValueChange={(value) => setDexFormData({ ...dexFormData, from_currency: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="RAC">RAC (Balance: {userBalance})</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="to_currency">To Currency</Label>
                  <Select
                    value={dexFormData.to_currency}
                    onValueChange={(value) => setDexFormData({ ...dexFormData, to_currency: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="USDT">USDT</SelectItem>
                      <SelectItem value="ETH">Ethereum</SelectItem>
                      <SelectItem value="BTC">Bitcoin</SelectItem>
                      <SelectItem value="SOL">Solana</SelectItem>
                      <SelectItem value="BNB">BNB</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="amount">Amount ({dexFormData.from_currency})</Label>
                  <Input
                    id="amount"
                    type="number"
                    value={dexFormData.amount}
                    onChange={(e) => setDexFormData({ ...dexFormData, amount: parseFloat(e.target.value) || 0 })}
                    placeholder="0.00"
                  />
                </div>

                <div>
                  <Label htmlFor="dex_provider">DEX Provider</Label>
                  <Select
                    value={dexFormData.dex_provider}
                    onValueChange={(value: 'uniswap' | 'pancakeswap' | 'raydium' | 'jupiter') => 
                      setDexFormData({ ...dexFormData, dex_provider: value })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="jupiter">Jupiter (Solana)</SelectItem>
                      <SelectItem value="raydium">Raydium (Solana)</SelectItem>
                      <SelectItem value="uniswap">Uniswap (Ethereum)</SelectItem>
                      <SelectItem value="pancakeswap">PancakeSwap (BSC)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="flex justify-end gap-2 pt-4">
                  <Button variant="outline" onClick={() => setShowDEXModal(false)}>
                    Cancel
                  </Button>
                  <Button onClick={executeDEXSwap}>
                    Execute Swap
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>

          <Dialog open={showCreateWallet} onOpenChange={setShowCreateWallet}>
            <DialogTrigger asChild>
              <Button onClick={() => resetForm()}>
                <Wallet className="h-4 w-4 mr-2" />
                Create Wallet
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-md">
              <DialogHeader>
                <DialogTitle>Create Asset Wallet</DialogTitle>
                <DialogDescription>
                  Create a dedicated wallet for a specific asset initiative
                </DialogDescription>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="asset_initiative">Asset Initiative</Label>
                  <Select
                    value={formData.asset_initiative_id}
                    onValueChange={(value) => setFormData({ ...formData, asset_initiative_id: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select an asset initiative" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1">Renewable Energy Fund</SelectItem>
                      <SelectItem value="2">AI Technology Fund</SelectItem>
                      <SelectItem value="3">Healthcare Innovation</SelectItem>
                      <SelectItem value="4">Education Technology</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="currency_type">Currency Type</Label>
                  <Select
                    value={formData.currency_type}
                    onValueChange={(value: 'USDT' | 'ETH' | 'BTC' | 'SOL' | 'BNB') => 
                      setFormData({ ...formData, currency_type: value })
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="USDT">USDT (Stablecoin)</SelectItem>
                      <SelectItem value="ETH">Ethereum</SelectItem>
                      <SelectItem value="BTC">Bitcoin</SelectItem>
                      <SelectItem value="SOL">Solana</SelectItem>
                      <SelectItem value="BNB">BNB</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="initial_deposit">Initial Deposit ({formData.currency_type})</Label>
                  <Input
                    id="initial_deposit"
                    type="number"
                    value={formData.initial_deposit}
                    onChange={(e) => setFormData({ ...formData, initial_deposit: parseFloat(e.target.value) || 0 })}
                    placeholder="0.00"
                  />
                </div>

                <div className="flex justify-end gap-2 pt-4">
                  <Button variant="outline" onClick={() => setShowCreateWallet(false)}>
                    Cancel
                  </Button>
                  <Button onClick={createAssetWallet}>
                    Create Wallet
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Wallets Grid */}
      {wallets.length === 0 ? (
        <Card>
          <CardContent className="text-center py-8">
            <Wallet className="h-12 w-12 mx-auto text-gray-400 mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Asset Wallets Yet</h3>
            <p className="text-gray-600 mb-4">
              Create your first asset wallet to start investing in specific initiatives.
            </p>
            <Button onClick={() => setShowCreateWallet(true)}>
              <Wallet className="h-4 w-4 mr-2" />
              Create Your First Wallet
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {wallets.map((wallet) => (
            <Card key={wallet.id} className="relative">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div className="flex items-center gap-2">
                    {getCurrencyIcon(wallet.currency_type)}
                    <div>
                      <CardTitle className="text-lg">{wallet.currency_type}</CardTitle>
                      <CardDescription>
                        {wallet.asset_initiative?.name || 'Asset Initiative'}
                      </CardDescription>
                    </div>
                  </div>
                  <Badge variant="default">Active</Badge>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="text-sm text-gray-600">
                    <div className="flex justify-between">
                      <span>Available Balance:</span>
                      <span className="font-medium">{wallet.balance.toFixed(6)} {wallet.currency_type}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Locked Balance:</span>
                      <span className="font-medium">{wallet.locked_balance.toFixed(6)} {wallet.currency_type}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Total Invested:</span>
                      <span className="font-medium">{wallet.total_invested.toFixed(6)} {wallet.currency_type}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Total Returns:</span>
                      <span className="font-medium text-green-600">+{wallet.total_returns.toFixed(6)} {wallet.currency_type}</span>
                    </div>
                  </div>

                  <div className="text-xs text-gray-500 font-mono">
                    {wallet.wallet_address}
                  </div>

                  <div className="pt-2">
                    <Button size="sm" variant="outline" className="w-full">
                      <ExternalLink className="h-3 w-3 mr-1" />
                      View Details
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* DEX Transactions History */}
      {dexTransactions.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ArrowUpDown className="h-5 w-5" />
              Recent DEX Transactions
            </CardTitle>
            <CardDescription>
              Your recent token swaps and conversions
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {dexTransactions.map((transaction) => (
                <div key={transaction.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center gap-3">
                    {getStatusIcon(transaction.status)}
                    <div>
                      <div className="font-medium">
                        {transaction.from_amount} {transaction.from_currency} → {transaction.to_amount.toFixed(6)} {transaction.to_currency}
                      </div>
                      <div className="text-sm text-gray-600">
                        Rate: 1 {transaction.from_currency} = {transaction.exchange_rate} {transaction.to_currency}
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-sm font-medium capitalize">{transaction.status}</div>
                    <div className="text-xs text-gray-600">
                      {new Date(transaction.created_at).toLocaleDateString()}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};
