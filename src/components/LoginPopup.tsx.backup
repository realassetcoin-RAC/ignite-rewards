import React, { useState } from 'react';
import { Dialog, DialogContent, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { LogoIcon } from '@/components/logo';
import { SeedPhraseLoginModal } from '@/components/SeedPhraseLoginModal';
import WalletSelector from '@/components/WalletSelector';
import { useToast } from '@/hooks/use-toast';
import { useSecureAuth } from '@/hooks/useSecureAuth';
import { databaseAdapter } from '@/lib/databaseAdapter';
import { supabase } from '@/integrations/supabase/client';
import { ReferralService } from '@/lib/referralService';
import { Loader2, Key, Gift, Wallet } from 'lucide-react';

interface LoginPopupProps {
  isOpen: boolean;
  onClose: () => void;
  onSwitchToSignup?: () => void;
}

export const LoginPopup: React.FC<LoginPopupProps> = ({
  isOpen,
  onClose,
  onSwitchToSignup
}) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [referralCode, setReferralCode] = useState('');
  const [showPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [showSeedPhraseModal, setShowSeedPhraseModal] = useState(false);
  const [showWalletSelector, setShowWalletSelector] = useState(false);
  const { toast } = useToast();
  const { refreshAuth } = useSecureAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!email || !password) {
      toast({
        title: "Missing Information",
        description: "Please enter both email and password.",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        throw error;
      }

      const result = { user: data.user };
      
      // Process referral code if provided (for existing users)
      if (referralCode.trim() && result?.user?.id) {
        try {
          const referralResult = await ReferralService.processReferralSignup(
            referralCode.trim(), 
            result.user.id
          );
          
          if (referralResult.success) {
            toast({
              title: "Referral Code Applied!",
              description: "You've earned bonus points from the referral!",
            });
          } else {
            toast({
              title: "Referral Code Issue",
              description: referralResult.error || "Invalid referral code",
              variant: "destructive"
            });
          }
        } catch (referralError) {
          console.error('Referral processing error:', referralError);
          toast({
            title: "Referral Processing Error",
            description: "Referral code could not be processed, but you're signed in successfully.",
            variant: "destructive"
          });
        }
      }
      
      toast({
        title: "Welcome Back!",
        description: "You have successfully signed in.",
      });
      refreshAuth();
      onClose();
    } catch (error) {
      toast({
        title: "Sign In Failed",
        description: error instanceof Error ? error.message : "Unable to sign in. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    try {
      setLoading(true);
      
      // Store referral code in sessionStorage for post-OAuth processing
      if (referralCode.trim()) {
        sessionStorage.setItem('pending_referral_code', referralCode.trim());
      }
      
      // Use local authentication system for Google OAuth
      const { data, error } = await databaseAdapter.supabase.auth.signInWithOAuth({
        provider: 'google'
      });

      if (error) {
        throw error;
      }

      if (data?.user) {
        console.log('Local Google OAuth success:', data.user);
        toast({
          title: "Sign In Successful",
          description: "Welcome back! You've successfully signed in with Google.",
        });
        
        // Process referral code if present
        const pendingReferralCode = sessionStorage.getItem('pending_referral_code');
        if (pendingReferralCode) {
          sessionStorage.removeItem('pending_referral_code');
          // TODO: Process referral code with the authenticated user
          console.log('Processing referral code:', pendingReferralCode);
        }
        
        onClose();
      } else {
        throw new Error('Failed to complete Google OAuth');
      }
    } catch (error) {
      console.error('Google OAuth error:', error);
      toast({
        title: "Google Sign In Failed",
        description: error instanceof Error ? error.message : "Unable to sign in with Google. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };


  const handleSeedPhraseSuccess = () => {
    toast({
      title: "Login Successful",
      description: "Welcome back! You've successfully logged in using your seed phrase.",
    });
    onClose();
  };

  const handleWalletConnect = () => {
    setShowWalletSelector(true);
  };

  const handleWalletConnected = () => {
    setShowWalletSelector(false);
    toast({
      title: "Wallet Connected!",
      description: "Your wallet has been successfully connected.",
    });
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-sm p-0 border-0 shadow-none bg-transparent">
        <DialogTitle className="sr-only">Sign In to RAC Rewards</DialogTitle>
        <DialogDescription className="sr-only">Welcome back! Sign in to continue</DialogDescription>
        <div className="bg-white/80 backdrop-blur-md rounded-lg border border-white/20">
          <form className="max-w-sm m-auto h-fit w-full">
            <div className="p-4">
              <div>
                <div className="mb-3">
                  <LogoIcon size="md" />
                </div>
                <h1 className="mb-1 text-lg font-semibold text-gray-900">Sign In to RAC Rewards</h1>
                <p className="text-sm text-gray-700">Welcome back! Sign in to continue</p>
              </div>

              <div className="mt-4 space-y-2">
                <Button
                  onClick={handleGoogleSignIn}
                  disabled={loading}
                  className="w-full h-9 bg-gray-800 text-white hover:bg-gray-700 border border-gray-800 rounded-md"
                  variant="outline"
                >
                  <svg className="w-4 h-4 mr-2" viewBox="0 0 24 24">
                    <path
                      fill="#4285f4"
                      d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    />
                    <path
                      fill="#34a853"
                      d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    />
                    <path
                      fill="#fbbc05"
                      d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    />
                    <path
                      fill="#eb4335"
                      d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    />
                  </svg>
                  <span className="text-white">
                    {loading ? 'Signing in...' : 'Google'}
                  </span>
                </Button>
                
                <Button
                  type="button"
                  variant="outline"
                  className="w-full h-9 bg-gray-800 text-white hover:bg-gray-700 border border-gray-800 rounded-md"
                  onClick={() => setShowSeedPhraseModal(true)}
                >
                  <Key className="mr-2 h-3 w-3 text-white" />
                  Seed Phrase
                </Button>
                <Button
                  type="button"
                  variant="outline"
                  className="w-full h-9 bg-gray-800 text-white hover:bg-gray-700 border border-gray-800 rounded-md"
                  onClick={handleWalletConnect}
                  disabled={loading}
                >
                  <Wallet className="mr-2 h-3 w-3 text-white" />
                  Connect Wallet
                </Button>
              </div>

              <div className="my-4 grid grid-cols-[1fr_auto_1fr] items-center gap-3">
                <hr className="border-dashed" />
                <span className="text-gray-600 text-xs">Or continue With</span>
                <hr className="border-dashed" />
              </div>

              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="email" className="block text-sm text-gray-900 font-medium">
                    Email
                  </Label>
                  <Input
                    type="email"
                    required
                    name="email"
                    id="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Enter your email"
                    disabled={loading}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="password" className="block text-sm text-gray-900 font-medium">
                    Password
                  </Label>
                  <Input
                    type={showPassword ? "text" : "password"}
                    required
                    name="password"
                    id="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="Enter your password"
                    disabled={loading}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="referral" className="block text-sm text-gray-900 font-medium flex items-center gap-2">
                    <Gift className="h-4 w-4 text-purple-600" />
                    Referral Code (Optional)
                  </Label>
                  <Input
                    type="text"
                    name="referral"
                    id="referral"
                    value={referralCode}
                    onChange={(e) => setReferralCode(e.target.value.toUpperCase())}
                    placeholder="Enter referral code"
                    disabled={loading}
                  />
                </div>

                <Button 
                  type="submit" 
                  className="w-full" 
                  disabled={loading}
                  onClick={handleSubmit}
                >
                  {loading ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Signing In...
                    </>
                  ) : (
                    'Continue'
                  )}
                </Button>
              </div>

            </div>

            <p className="text-gray-600 text-center text-sm">
              Don't have an account?{' '}
              <Button
                type="button"
                variant="link"
                className="px-2 text-blue-600 hover:text-blue-800"
                onClick={onSwitchToSignup}
              >
                Create account
              </Button>
            </p>
          </form>
        </div>
      </DialogContent>

      {/* Seed Phrase Login Modal */}
      <SeedPhraseLoginModal
        isOpen={showSeedPhraseModal}
        onClose={() => setShowSeedPhraseModal(false)}
        onSuccess={handleSeedPhraseSuccess}
      />

      {/* Wallet Selector Modal */}
      <WalletSelector
        isOpen={showWalletSelector}
        onClose={() => setShowWalletSelector(false)}
        onWalletConnected={handleWalletConnected}
      />
    </Dialog>
  );
};

export default LoginPopup;
